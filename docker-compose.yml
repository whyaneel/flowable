version: "3"
services:
  flowable:
    container_name: flowable
    image: flowable/all-in-one
    ports:
      - 8080:8080

  database:
    image: postgres:latest
    container_name: database
    ports:
      - 5432:5432
    command: postgres -c 'max_connections=200'
    environment:
      - POSTGRES_DB=ONE_TASK_DB
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres

  one-task:
    container_name: one-task
    image: one-task-app-kafka:latest
    environment:
      JAVA_TOOL_OPTIONS: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=7090 -Xms256m -Xmx512m"
      SERVER_PORT: 9090
      DATABASE_PLATFORM: org.hibernate.dialect.PostgreSQL9Dialect
      DATABASE_URI: jdbc:postgresql://database:5432/ONE_TASK_DB
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: postgres
      DATABASE_DRIVER_CLASS_NAME: org.postgresql.Driver
      ERROR_LEVEL_SPRING: "INFO"
      ERROR_LEVEL_APP: "INFO"
      ERROR_LEVEL_HIBERNATE: "INFO"
      LOG_PATH: "/opt/logs/"
      DB_MIN_IDLE: 10
      DB_MAX_POOL_SIZE: 50
      DB_IDLE_TIMEOUT: 30000
      DB_MAX_LIFETIME: 2000000
      DB_CONNECTION_TIMEOUT: 30000
      BOOTSTRAP_SERVER: kafka:9092
      PRODUCER_ACKS: all
    ports:
      - 9090:9090
      - 7090:7090

  zookeeper:
    image: confluentinc/cp-zookeeper:5.5.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    container_name: zookeeper
    ports:
      - 2181:2181

  kafka:
    image: confluentinc/cp-kafka:5.5.1
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    ports:
      - 9092:9092
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock